//ESPNow Master from Serial Port
//By Christopher George

#include <esp_now.h>
#include <WiFi.h>
#define RXD2 16
#define TXD2 17
// REPLACE WITH YOUR RECEIVER MAC Address
uint8_t broadcastAddress[] = {0xff, 0xff, 0xff, 0xff, 0xff, 0xff};//MAC of slave device

typedef struct struct_message {
  int integer;
} struct_message;

struct_message message;

void data_sent(const uint8_t *mac_addr, esp_now_send_status_t status) {
  Serial.print("\r\nStatus of Last Message Sent:\t");
  Serial.println(status == ESP_NOW_SEND_SUCCESS ? "Delivery Success" : "Delivery Fail");
}
 
void setup() {

  Serial.begin(115200);
  Serial2.begin(115200, SERIAL_8N1, RXD2, TXD2);
  while (!Serial2);
  WiFi.mode(WIFI_STA);
  
  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }

  esp_now_register_send_cb(data_sent);
  
  esp_now_peer_info_t peerInfo;
  memcpy(peerInfo.peer_addr, broadcastAddress, 6);
  peerInfo.channel = 0;  
  peerInfo.encrypt = false;     
  if (esp_now_add_peer(&peerInfo) != ESP_OK){
    Serial.println("Failed to add peer");
    return;
  }
}
 
void loop() {
  if (Serial2.available()){
    int state = Serial2.parseInt();
    if (state == 1){
      message.integer = 1;
      Serial.print("Command:");
      Serial.println(message.integer);
      esp_err_t outcome = esp_now_send(broadcastAddress, (uint8_t *) &message, sizeof(message)); 
  if (outcome == ESP_OK) {
    Serial.println("Mesage sent successfully!");
  }
  else {
    Serial.println("Error sending the message");
  }
    } else if (state==2){
      message.integer = 2;
      Serial.print("Command:");
      Serial.println(message.integer);
      esp_err_t outcome = esp_now_send(broadcastAddress, (uint8_t *) &message, sizeof(message)); 
  if (outcome == ESP_OK) {
    Serial.println("Mesage sent successfully!");
  }
  else {
    Serial.println("Error sending the message");
  }
    } else if (state==3){
      message.integer = 3;
      Serial.print("Command:");
      Serial.println(message.integer);
      esp_err_t outcome = esp_now_send(broadcastAddress, (uint8_t *) &message, sizeof(message)); 
  if (outcome == ESP_OK) {
    Serial.println("Mesage sent successfully!");
  }
  else {
    Serial.println("Error sending the message");
  }
    } else if (state==4){
      message.integer = 4;
      Serial.print("Command:");
      Serial.println(message.integer);
      esp_err_t outcome = esp_now_send(broadcastAddress, (uint8_t *) &message, sizeof(message)); 
  if (outcome == ESP_OK) {
    Serial.println("Mesage sent successfully!");
  }
  else {
    Serial.println("Error sending the message");
  }
    }
  delay(1000);
  }
}
