// ***************************************************************
// *           Behringer XR18 Wio Terminal Remote                *
// *                   By Chris George                           *
// ***************************************************************
// * This code connects to WiFI and sends OSC commands to an     *
// * Behringer XR18. You have to enter an IP address for the     *
// * mixer for this demo to work. Original script by Vern        *
// * Graner used an ESP32 board and leds to indicate buttons.    *
// ***************************************************************
// * Rev Info: V1.5 Added Nico Hood's HID Library to add media   *
// *                player controls to the device while it is    *
// *                is connected to a commputer by usb port.     *
// *                Starting denoting Libraries used.            *
// * Rev Info: V1.0 Rewritten Code to WIO Terminal board and     *
// *                changed functons for needed automations.     *
// *                These are automations like fade in/out       *
// *                back ground music and mute groups.           *
// *                This may be expanded in time.                *
// ***************************************************************

#include "HID-Project.h"// adds Keyboard media controls
#include <rpcWiFi.h>            // For WiFi
#include <WiFiUdp.h>          // For WiFi
#include "TFT_eSPI.h" //TFT LCD library
#include <OSCMessage.h>       // For OSC support
TFT_eSPI tft; //Initializing TFT LCD library
TFT_eSprite spr = TFT_eSprite(&tft); //Initializing the buffer
const char* buttonCommand[]={
  "/config/mute/1",          // This controls Mute Group 1
  "/config/mute/2",          // This controls Mute Group 2
  "/rtn/aux/mix/on",         // This controls Aux Mute
  "/rtn/aux/mix/fader",    // This Command is for Fader of Aux on Mains
  "/lr/mix/on",
};
int fadeLimit=50;
int fadeSet=33;

const char* fadeCommand[]={
  "-100","-97","-95","-93","-91", // This is fader control values
  "-89","-87","-85","-83","-81",  // that can be used for any fader     
  "-79","-77","-75","-73","-71",  // automation.       
  "-69","-67","-65","-63","-61",
  "-59","-57","-55","-53","-51",
  "-49","-47","-45","-43","-41",
  "-39","-37","-35","-33","-31",
  "-29","-27","-25","-23","-21",
  "-19","-17","-15","-13","-11",
  "-9","-7","-5","-3","-1",
}; 
// Define program Variables
int buttonState[] = {0,0,0,1};   // current state of the button
int lastState[] = {0,0,0,0};     // previous state of the button

// WiFi setup
char ssid[] = "YOUR_SSID";           // your network SSID (name)
char pass[] = "YOUR_PASSWORD";    // your network password

WiFiUDP Udp;                                // A UDP instance to let us send and receive packets over UDP
const IPAddress outIp(192,168,1,1);       // IP of the XR18 in Comma Separated Octets, NOT dots!
const unsigned int outPort = 10024;         // remote port to receive OSC X-AIR is 10024, X32 is 10023
const unsigned int localPort = 8888;        // local port to listen for OSC packets (actually not used for sending)

void setup() {
   pinMode(WIO_KEY_A, INPUT);
   pinMode(WIO_KEY_B, INPUT);
   pinMode(WIO_KEY_C, INPUT);
   pinMode(WIO_5S_UP, INPUT);
   pinMode(WIO_5S_DOWN, INPUT);
   pinMode(WIO_5S_LEFT, INPUT);
   pinMode(WIO_5S_RIGHT, INPUT);
   pinMode(WIO_5S_PRESS, INPUT_PULLUP);
   tft.begin(); //LCD initialization
   tft.setRotation(0); //Setting LCD rotation
   Serial.begin(115200); // DEBUG window
   Serial.println();
   Serial.println();
   Serial.print("Connecting to ");     // to DEBUG screen
   Serial.println(ssid);               // to DEBUG screen
   WiFi.begin(ssid, pass);

    while (WiFi.status() != WL_CONNECTED) {
        delay(1000);
        Serial.print(".");
    }
    Serial.println("");

    Serial.println("WiFi connected");

    Serial.println("IP: ");
    Serial.println(WiFi.localIP());
    Serial.println("Starting UDP");
    Udp.begin(localPort);
    Serial.print("Local port: ");
    Serial.println(localPort);
    Serial.println("");
    lcdStart();//draws menu after connection starts
    Consumer.begin(); //start keyboard communication
}

void loop() { // Main Loop
  if (digitalRead(WIO_KEY_A) == LOW){ //Detecting the button press
    if (buttonState[0]==0){
    tft.fillCircle(57,90,40,TFT_RED); //Fill circle with red color
    ccommand(0,0);
    fadeSet=fadeSet+2;
    fcommand(3,fadeSet);
    lastState[0]=1;
    }else if (buttonState[0]==1){
      tft.fillCircle(57,90,40,TFT_WHITE); //Fill circle with red color
    ccommand(0,1);
     fadeSet=fadeSet-2;
    fcommand(3,fadeSet);
    lastState[0]=0;
    }
    delay(100);
    lcdStart();
  }
  //mute button 
  else if (digitalRead(WIO_KEY_C) == LOW){ //Detecting the button press
    if (buttonState[2]==0){
    tft.fillCircle(57,270,40,TFT_BLUE); //Fill circle with red color
    ccommand(4,0);
    lastState[2]=1;
    }else if (buttonState[2]==1){
      tft.fillCircle(57,270,40,TFT_WHITE);; //Fill circle with red color
    ccommand(4,1);
    lastState[2]=0;
    }
    delay(100);
    lcdStart();
  }
  //mute button 
  else if(digitalRead(WIO_KEY_B) == LOW){
    if (buttonState[1]==0){
    tft.fillCircle(57,180,40,TFT_RED); //Fill circle with red color
    Consumer.write(MEDIA_PLAY_PAUSE); 
    ccommand(1,0);
    ccommand(2,0);
    for (int d=0;d<fadeSet;d++){
      fcommand(3,d);
      delay(100);
    }
    lastState[1]=1;
    }else if (buttonState[1]==1){
      tft.fillCircle(57,180,40,TFT_WHITE); //Fill circle with red color
    ccommand(1,1);
    ccommand(0,1);
    for (int d=fadeSet;d>0;d--){
      fcommand(3,d);
      delay(100);
    }
    ccommand(2,1);
    Consumer.write(MEDIA_PLAY_PAUSE);  
    lastState[0]=0;
    lastState[1]=0;
    fadeSet=fadeSet-2;
    tft.fillCircle(57,90,40,TFT_WHITE);
    }
    delay(100);
    lcdStart();
  }
  //channel up switch 
  else if(digitalRead(WIO_5S_RIGHT) == LOW){
    tft.fillCircle(173,85,25,TFT_DARKGREEN);
    fadeSet++;
    fcommand(3,fadeSet);
    delay(100);
    tft.fillCircle(173,85,25,TFT_WHITE);
    lcdStart();
  }
  //channel down switch
  else if(digitalRead(WIO_5S_LEFT) == LOW){
    tft.fillCircle(173,185,25,TFT_DARKGREEN);
    fadeSet--;
    fcommand(3,fadeSet);
    delay(100);
    tft.fillCircle(173,185,25,TFT_WHITE);
    lcdStart();
  }else if(digitalRead(WIO_5S_UP) == LOW){
    Consumer.write(MEDIA_PREVIOUS);
    delay(100);
  }
  //channel down switch
  else if(digitalRead(WIO_5S_DOWN) == LOW){
    Consumer.write(MEDIA_NEXT); 
    delay(300);
  } else if(digitalRead(WIO_5S_PRESS) == LOW){
    Consumer.write(MEDIA_PLAY_PAUSE); 
    delay(300);
  }
  for (int i=0;i<4;i++){
    buttonState[i]=lastState[i];
  }
}//End of main loop

void ccommand(int cr,int ct){
  if (ct==0){
  OSCMessage msg(buttonCommand[cr]);
         msg.add("ON");
         Udp.beginPacket(outIp, outPort);
         msg.send(Udp);
         Udp.endPacket();
         msg.empty();
  } else if (ct==1){
    OSCMessage msg(buttonCommand[cr]);
         msg.add("OFF");
         Udp.beginPacket(outIp, outPort);
         msg.send(Udp);
         Udp.endPacket();
         msg.empty();
  }
}

void fcommand(int cr,int ct){
  OSCMessage msg(buttonCommand[cr]);
         msg.add(fadeCommand[ct]);
         Udp.beginPacket(outIp, outPort);
         msg.send(Udp);
         Udp.endPacket();
         msg.empty();
}

void lcdStart(){
   //Setting Background color

  //Creating "TV Remote" title
  tft.fillRect(0,0,240,320,TFT_WHITE);
  tft.fillRect(0,0,240,45,TFT_BLUE);
  tft.fillRect(4,4,232,37,TFT_RED);//Drawing rectangle with blue fill
  tft.setTextSize(3); //Setting text size 
  tft.setTextColor(TFT_WHITE); //Setting text color
  tft.drawString("Xair Remote",25,12); //Drawing text string

  //Draw power button 
  tft.setTextSize(2);
  tft.setTextColor(TFT_BLACK);
  tft.fillCircle(57,90,44,TFT_BLUE);
  tft.fillCircle(57,90,40,TFT_RED); //Drawing circle with red outline
  tft.drawString("Talk",36,85);

  //Draw mute button 
  tft.fillCircle(57,180,44,TFT_BLUE);
  tft.fillCircle(57,180,40,TFT_RED);
  tft.drawString("Break",31,173);
  tft.fillCircle(57,270,44,TFT_BLUE);
  tft.fillCircle(57,270,40,TFT_RED);
  tft.drawString("Mains",31,263);

  //Draw channel buttons 
  tft.setTextSize(3);
  tft.drawString("AUX",149,124);
  tft.fillCircle(173,85,29,TFT_BLUE);
  tft.fillCircle(173,85,25,TFT_RED);
  tft.fillCircle(173,185,29,TFT_BLUE);
  tft.fillCircle(173,185,25,TFT_RED);
  tft.fillRect(137,236,78,53,TFT_BLUE);
  tft.fillRect(139,238,74,49,TFT_RED);
  tft.setTextColor(TFT_WHITE);
  tft.drawString(fadeCommand[fadeSet],149,250);
}
